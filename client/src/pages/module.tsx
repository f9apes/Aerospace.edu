import { useState, useEffect } from 'react';
import { useParams, Link } from 'wouter';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import SpaceBackground from '@/components/space-background';
import Navigation from '@/components/navigation';
import Quiz from '@/components/quiz';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
// import { Progress } from '@/components/ui/progress';
import { LearningModule } from '@/types';
import { useUserProgress } from '@/hooks/use-user-progress';
import { apiRequest } from '@/lib/queryClient';
import animations from '@/lib/animations';

export default function Module() {
  const { id } = useParams<{ id: string }>();
  const moduleId = parseInt(id || '1');
  const [currentSection, setCurrentSection] = useState(0);
  const [showQuiz, setShowQuiz] = useState(false);
  const [moduleCompleted, setModuleCompleted] = useState(false);
  const [startTime] = useState(Date.now());
  
  const queryClient = useQueryClient();
  const { user, awardXP, addBadge, userId } = useUserProgress();

  // Fetch module data
  const { data: module, isLoading } = useQuery<LearningModule>({
    queryKey: ['/api/modules', moduleId]
  });

  // Fetch module progress
  // const { data: progress } = useQuery({
  //   queryKey: ['/api/user', userId, 'progress', moduleId],
  //   enabled: !!userId
  // });

  // Complete module mutation
  const completeModuleMutation = useMutation({
    mutationFn: async ({ score, timeSpent }: { score: number; timeSpent: number }) => {
      const response = await apiRequest('POST', `/api/user/${userId}/complete-module/${moduleId}`, {
        score,
        timeSpent,
        xpEarned: module?.xpReward || 0
      });
      return response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user', userId] });
      queryClient.invalidateQueries({ queryKey: ['/api/user', userId, 'progress'] });
      queryClient.invalidateQueries({ queryKey: ['/api/user', userId, 'activities'] });
      setModuleCompleted(true);
      
      // Award badges for milestones
      if (moduleId === 1) {
        addBadge('rookie', 'Completed first module');
      }
      if (user && user.modulesCompleted + 1 >= 3) {
        addBadge('explorer', 'Completed all learning modules');
      }
    }
  });

  useEffect(() => {
    if (module) {
      const timer = setTimeout(() => {
        animations.animateModuleCards();
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [module]);

  if (isLoading) {
    return (
      <SpaceBackground>
        <Navigation />
        <div className="container mx-auto max-w-4xl px-6 py-20">
          <div className="text-center">
            <div className="animate-spin w-12 h-12 border-4 border-neon-cyan border-t-transparent rounded-full mx-auto mb-4"></div>
            <p className="text-gray-300">Loading module...</p>
          </div>
        </div>
      </SpaceBackground>
    );
  }

  if (!module) {
    return (
      <SpaceBackground>
        <Navigation />
        <div className="container mx-auto max-w-4xl px-6 py-20">
          <Card className="glass-effect rounded-xl p-8 text-center">
            <i className="fas fa-exclamation-triangle text-solar-yellow text-4xl mb-4"></i>
            <h2 className="font-orbitron text-2xl font-bold text-white mb-4">Module Not Found</h2>
            <p className="text-gray-300 mb-6">The requested learning module could not be found.</p>
            <Link href="/">
              <Button className="bg-gradient-to-r from-neon-cyan to-cosmic-purple">
                Return Home
              </Button>
            </Link>
          </Card>
        </div>
      </SpaceBackground>
    );
  }

  const handleQuizComplete = (score: number) => {
    const timeSpent = Math.floor((Date.now() - startTime) / 1000);
    completeModuleMutation.mutate({ score, timeSpent });
  };

  const handleShowQuiz = () => {
    setShowQuiz(true);
    awardXP(25, `Completed all sections of Module ${moduleId}`);
  };

  const currentSectionData = module.content.sections[currentSection];
  const progressPercent = showQuiz ? 100 : ((currentSection + 1) / module.content.sections.length) * 80;

  // Force explanation interactions
  const showForceExplanation = (force: string) => {
    const explanations = {
      lift: 'Lift is the upward force that opposes weight and allows aircraft to fly. It\'s generated by air flowing faster over the top of wings.',
      weight: 'Weight is the downward force caused by gravity pulling on the aircraft\'s mass. It must be overcome by lift for flight.',
      thrust: 'Thrust is the forward force generated by engines (propellers, jets, or rockets) that propels the aircraft through the air.',
      drag: 'Drag is the resistance force that opposes motion through air. Streamlined shapes reduce drag for better efficiency.'
    };

    const explanationDiv = document.getElementById('force-explanation');
    if (explanationDiv) {
      explanationDiv.querySelector('p')!.textContent = explanations[force as keyof typeof explanations];
      explanationDiv.classList.remove('hidden');
    }
  };

  if (moduleCompleted) {
    return (
      <SpaceBackground>
        <Navigation />
        <div className="container mx-auto max-w-4xl px-6 py-20">
          <Card className="glass-effect rounded-xl p-8 text-center">
            <div className="w-24 h-24 mx-auto bg-gradient-to-br from-solar-yellow to-cosmic-purple rounded-full flex items-center justify-center mb-6">
              <i className="fas fa-trophy text-4xl text-white"></i>
            </div>
            <h2 className="font-orbitron text-3xl font-bold text-solar-yellow mb-4">
              Module Completed!
            </h2>
            <h3 className="text-xl font-bold text-white mb-4">{module.title}</h3>
            <p className="text-gray-300 mb-8">
              Congratulations! You've successfully completed this module and earned {module.xpReward} XP.
            </p>
            <div className="flex justify-center space-x-4">
              <Link href="/">
                <Button className="bg-gradient-to-r from-neon-cyan to-cosmic-purple">
                  <i className="fas fa-home mr-2"></i>
                  Return Home
                </Button>
              </Link>
              <Link href="/dashboard">
                <Button variant="outline" className="border-solar-yellow text-solar-yellow hover:bg-solar-yellow hover:text-dark-space">
                  <i className="fas fa-chart-line mr-2"></i>
                  View Progress
                </Button>
              </Link>
            </div>
          </Card>
        </div>
      </SpaceBackground>
    );
  }

  return (
    <SpaceBackground>
      <Navigation />
      
      <div className="container mx-auto max-w-4xl px-6 py-20">
        <Card className="glass-effect rounded-xl p-8">
          <div className="text-center mb-12">
            <h2 className="font-orbitron text-4xl font-bold text-neon-cyan mb-4">
              {module.title}
            </h2>
            <p className="text-lg text-gray-300 mb-6">{module.subtitle}</p>
            
            {/* Progress Bar */}
            <div className="w-full bg-gray-700 rounded-full h-3 mb-6">
              <div 
                className="progress-bar h-3 rounded-full transition-all duration-1000"
                style={{ width: `${progressPercent}%` }}
              />
            </div>
            <div className="text-sm text-gray-400">
              {showQuiz ? 'Quiz Section' : `Section ${currentSection + 1} of ${module.content.sections.length}`}
            </div>
          </div>

          {showQuiz ? (
            <Quiz 
              questions={module.content.quiz}
              onComplete={handleQuizComplete}
            />
          ) : (
            <div className="space-y-8">
              
              {/* Learning Content */}
              <div className="lesson-section">
                <h3 className="font-orbitron text-2xl font-bold text-solar-yellow mb-6">
                  {currentSectionData.title}
                </h3>
                
                {currentSectionData.imageUrl && (
                  <img 
                    src={currentSectionData.imageUrl}
                    alt={currentSectionData.title}
                    className="w-full h-64 object-cover rounded-lg mb-6"
                  />
                )}
                
                <p className="text-lg text-gray-300 mb-6 leading-relaxed">
                  {currentSectionData.content}
                </p>
                
                {/* Interactive Four Forces Diagram for Module 1 */}
                {moduleId === 1 && currentSectionData.id === 'forces' && (
                  <Card className="bg-gray-800 rounded-lg p-6 mb-6">
                    <h4 className="font-bold text-neon-cyan mb-4">Four Forces of Flight</h4>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                      <div 
                        className="text-center p-4 bg-blue-500/20 rounded-lg hover:bg-blue-500/40 transition-all cursor-pointer" 
                        onClick={() => showForceExplanation('lift')}
                      >
                        <i className="fas fa-arrow-up text-3xl text-blue-400 mb-2"></i>
                        <h5 className="font-bold text-blue-400">LIFT</h5>
                        <p className="text-xs text-gray-300">Upward force</p>
                      </div>
                      <div 
                        className="text-center p-4 bg-red-500/20 rounded-lg hover:bg-red-500/40 transition-all cursor-pointer" 
                        onClick={() => showForceExplanation('weight')}
                      >
                        <i className="fas fa-arrow-down text-3xl text-red-400 mb-2"></i>
                        <h5 className="font-bold text-red-400">WEIGHT</h5>
                        <p className="text-xs text-gray-300">Downward force</p>
                      </div>
                      <div 
                        className="text-center p-4 bg-green-500/20 rounded-lg hover:bg-green-500/40 transition-all cursor-pointer" 
                        onClick={() => showForceExplanation('thrust')}
                      >
                        <i className="fas fa-arrow-right text-3xl text-green-400 mb-2"></i>
                        <h5 className="font-bold text-green-400">THRUST</h5>
                        <p className="text-xs text-gray-300">Forward force</p>
                      </div>
                      <div 
                        className="text-center p-4 bg-yellow-500/20 rounded-lg hover:bg-yellow-500/40 transition-all cursor-pointer" 
                        onClick={() => showForceExplanation('drag')}
                      >
                        <i className="fas fa-arrow-left text-3xl text-yellow-400 mb-2"></i>
                        <h5 className="font-bold text-yellow-400">DRAG</h5>
                        <p className="text-xs text-gray-300">Backward force</p>
                      </div>
                    </div>
                    <div id="force-explanation" className="mt-4 p-4 bg-gray-700 rounded-lg hidden">
                      <p className="text-gray-300"></p>
                    </div>
                  </Card>
                )}

                {/* Rocket Anatomy Interactive for Module 2 */}
                {moduleId === 2 && currentSectionData.id === 'anatomy' && (
                  <Card className="bg-gray-800 rounded-lg p-6 mb-6">
                    <h4 className="font-bold text-neon-cyan mb-4">Interactive Rocket Components</h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                      <div className="space-y-3">
                        <div className="p-3 bg-neon-cyan/20 rounded-lg border-l-4 border-neon-cyan">
                          <h5 className="font-bold text-neon-cyan">Nose Cone</h5>
                          <p className="text-sm text-gray-300">Pointed tip that reduces air resistance during flight</p>
                        </div>
                        <div className="p-3 bg-solar-yellow/20 rounded-lg border-l-4 border-solar-yellow">
                          <h5 className="font-bold text-solar-yellow">Payload Bay</h5>
                          <p className="text-sm text-gray-300">Compartment that carries satellites, crew, or cargo</p>
                        </div>
                        <div className="p-3 bg-cosmic-purple/20 rounded-lg border-l-4 border-cosmic-purple">
                          <h5 className="font-bold text-cosmic-purple">Fuel Tanks</h5>
                          <p className="text-sm text-gray-300">Store liquid oxygen and rocket fuel propellants</p>
                        </div>
                        <div className="p-3 bg-red-500/20 rounded-lg border-l-4 border-red-500">
                          <h5 className="font-bold text-red-400">Engines</h5>
                          <p className="text-sm text-gray-300">Combust fuel to create thrust for liftoff</p>
                        </div>
                      </div>
                      <div className="flex items-center justify-center">
                        <div className="text-6xl">🚀</div>
                      </div>
                    </div>
                  </Card>
                )}
              </div>

              {/* Navigation */}
              <div className="flex justify-between items-center">
                <Button
                  onClick={() => setCurrentSection(Math.max(0, currentSection - 1))}
                  disabled={currentSection === 0}
                  variant="outline"
                  className="border-gray-600 hover:bg-gray-700"
                >
                  <i className="fas fa-arrow-left mr-2"></i>
                  Previous
                </Button>
                
                <div className="text-center">
                  <div className="flex space-x-2">
                    {module.content.sections.map((_, index) => (
                      <div
                        key={index}
                        className={`w-3 h-3 rounded-full transition-colors ${
                          index <= currentSection ? 'bg-neon-cyan' : 'bg-gray-600'
                        }`}
                      />
                    ))}
                  </div>
                </div>
                
                {currentSection === module.content.sections.length - 1 ? (
                  <Button
                    onClick={handleShowQuiz}
                    className="bg-gradient-to-r from-solar-yellow to-cosmic-purple hover:scale-105 transition-all"
                  >
                    <i className="fas fa-brain mr-2"></i>
                    Take Quiz
                  </Button>
                ) : (
                  <Button
                    onClick={() => {
                      setCurrentSection(Math.min(module.content.sections.length - 1, currentSection + 1));
                      awardXP(10, `Completed section: ${currentSectionData.title}`);
                    }}
                    className="bg-gradient-to-r from-neon-cyan to-cosmic-purple hover:scale-105 transition-all"
                  >
                    Next
                    <i className="fas fa-arrow-right ml-2"></i>
                  </Button>
                )}
              </div>
            </div>
          )}
        </Card>
      </div>
    </SpaceBackground>
  );
}
